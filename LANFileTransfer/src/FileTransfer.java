import java.net.*; 
import java.io.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Kausik N
 */
public class FileTransfer extends javax.swing.JFrame {

    /**
     * Creates new form Test
     */
    public FileTransfer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code.\nThe content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background_Panel = new javax.swing.JPanel();
        Title_Label = new javax.swing.JLabel();
        BasicDetails_Panel = new javax.swing.JPanel();
        IPAddr_Label = new javax.swing.JLabel();
        IPAddr_1_TextBox = new javax.swing.JTextField();
        IPAddr_2_TextBox = new javax.swing.JTextField();
        IPAddr_3_TextBox = new javax.swing.JTextField();
        IPAddr_4_TextBox = new javax.swing.JTextField();
        Sender_Port_Label = new javax.swing.JLabel();
        Sender_Port_TextBox = new javax.swing.JTextField();
        UpdatePortIP_Button = new javax.swing.JButton();
        Receiver_Port_Label = new javax.swing.JLabel();
        Receiver_Port_TextBox = new javax.swing.JTextField();
        Sender_Panel = new javax.swing.JPanel();
        Directory_Label = new javax.swing.JLabel();
        Filename_Label = new javax.swing.JLabel();
        Directory_TextBox = new javax.swing.JTextField();
        Filename_TextBox = new javax.swing.JTextField();
        SendFile_Button = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SendFile_TextArea = new javax.swing.JTextArea();
        Sender_Progress_Main = new javax.swing.JProgressBar();
        Receiver_Panel = new javax.swing.JPanel();
        DestDir_Label = new javax.swing.JLabel();
        DestFilename_Label = new javax.swing.JLabel();
        DestDir_TextBox = new javax.swing.JTextField();
        DestFilename_TextBox = new javax.swing.JTextField();
        ReceiveFile_Button = new javax.swing.JButton();
        RejectFile_Button = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReceiveFile_TextArea = new javax.swing.JTextArea();
        Receiver_Progress_Main = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Background_Panel.setBackground(new java.awt.Color(0, 0, 0));

        Title_Label.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        Title_Label.setForeground(new java.awt.Color(0, 255, 204));
        Title_Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title_Label.setText("LAN FILE TRANSFER");

        BasicDetails_Panel.setBackground(new java.awt.Color(0, 0, 0));
        BasicDetails_Panel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        BasicDetails_Panel.setForeground(new java.awt.Color(51, 255, 255));

        IPAddr_Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        IPAddr_Label.setForeground(new java.awt.Color(0, 255, 204));
        IPAddr_Label.setText("IP Address");

        IPAddr_1_TextBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        IPAddr_1_TextBox.setText("127");

        IPAddr_2_TextBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        IPAddr_2_TextBox.setText("0");

        IPAddr_3_TextBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        IPAddr_3_TextBox.setText("0");

        IPAddr_4_TextBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        IPAddr_4_TextBox.setText("1");

        Sender_Port_Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Sender_Port_Label.setForeground(new java.awt.Color(0, 255, 204));
        Sender_Port_Label.setText("Send to Port");

        Sender_Port_TextBox.setText("9009");

        UpdatePortIP_Button.setBackground(new java.awt.Color(0, 0, 0));
        UpdatePortIP_Button.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        UpdatePortIP_Button.setForeground(new java.awt.Color(0, 255, 204));
        UpdatePortIP_Button.setText("Save");
        UpdatePortIP_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        UpdatePortIP_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePortIP_ButtonActionPerformed(evt);
            }
        });

        Receiver_Port_Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Receiver_Port_Label.setForeground(new java.awt.Color(0, 255, 204));
        Receiver_Port_Label.setText("Receiver Port");

        Receiver_Port_TextBox.setText("9009");

        javax.swing.GroupLayout BasicDetails_PanelLayout = new javax.swing.GroupLayout(BasicDetails_Panel);
        BasicDetails_Panel.setLayout(BasicDetails_PanelLayout);
        BasicDetails_PanelLayout.setHorizontalGroup(
            BasicDetails_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BasicDetails_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BasicDetails_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BasicDetails_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Sender_Port_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(IPAddr_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(Receiver_Port_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasicDetails_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BasicDetails_PanelLayout.createSequentialGroup()
                        .addGroup(BasicDetails_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(UpdatePortIP_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(BasicDetails_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(BasicDetails_PanelLayout.createSequentialGroup()
                                    .addComponent(IPAddr_1_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(IPAddr_2_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(IPAddr_3_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(IPAddr_4_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(Sender_Port_TextBox)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(Receiver_Port_TextBox))
                .addContainerGap())
        );
        BasicDetails_PanelLayout.setVerticalGroup(
            BasicDetails_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BasicDetails_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BasicDetails_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IPAddr_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IPAddr_1_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IPAddr_2_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IPAddr_3_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IPAddr_4_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasicDetails_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Sender_Port_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Sender_Port_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BasicDetails_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Receiver_Port_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Receiver_Port_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(UpdatePortIP_Button)
                .addContainerGap())
        );

        Sender_Panel.setBackground(new java.awt.Color(0, 0, 0));
        Sender_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)), "Sender", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11), new java.awt.Color(0, 204, 204))); // NOI18N
        Sender_Panel.setForeground(new java.awt.Color(0, 0, 0));

        Directory_Label.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Directory_Label.setForeground(new java.awt.Color(0, 255, 204));
        Directory_Label.setText("Directory");

        Filename_Label.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Filename_Label.setForeground(new java.awt.Color(0, 255, 204));
        Filename_Label.setText("Filename");

        Directory_TextBox.setText("C:\\GitHub Codes and Projects\\Networking Files\\LANFileTransfer");

        Filename_TextBox.setText("a.out");

        SendFile_Button.setBackground(new java.awt.Color(0, 0, 0));
        SendFile_Button.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        SendFile_Button.setForeground(new java.awt.Color(0, 255, 204));
        SendFile_Button.setText("Send File");
        SendFile_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        SendFile_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendFile_ButtonActionPerformed(evt);
            }
        });

        SendFile_TextArea.setEditable(false);
        SendFile_TextArea.setColumns(20);
        SendFile_TextArea.setRows(5);
        jScrollPane2.setViewportView(SendFile_TextArea);

        javax.swing.GroupLayout Sender_PanelLayout = new javax.swing.GroupLayout(Sender_Panel);
        Sender_Panel.setLayout(Sender_PanelLayout);
        Sender_PanelLayout.setHorizontalGroup(
            Sender_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Sender_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Sender_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Sender_PanelLayout.createSequentialGroup()
                        .addGroup(Sender_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(Sender_PanelLayout.createSequentialGroup()
                                .addComponent(Directory_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Directory_TextBox))
                            .addGroup(Sender_PanelLayout.createSequentialGroup()
                                .addComponent(Filename_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Filename_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 279, Short.MAX_VALUE)
                        .addComponent(SendFile_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addComponent(Sender_Progress_Main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        Sender_PanelLayout.setVerticalGroup(
            Sender_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Sender_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Sender_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(Sender_PanelLayout.createSequentialGroup()
                        .addGroup(Sender_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Directory_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Directory_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Sender_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Filename_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Filename_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(SendFile_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Sender_Progress_Main, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Receiver_Panel.setBackground(new java.awt.Color(0, 0, 0));
        Receiver_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)), "Receiver", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11), new java.awt.Color(0, 204, 204))); // NOI18N
        Receiver_Panel.setForeground(new java.awt.Color(0, 0, 0));

        DestDir_Label.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        DestDir_Label.setForeground(new java.awt.Color(0, 255, 204));
        DestDir_Label.setText("Directory");

        DestFilename_Label.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        DestFilename_Label.setForeground(new java.awt.Color(0, 255, 204));
        DestFilename_Label.setText("Filename");

        DestDir_TextBox.setText("C:\\GitHub Codes and Projects\\Networking Files\\LANFileTransfer");

        DestFilename_TextBox.setText("b");

        ReceiveFile_Button.setBackground(new java.awt.Color(0, 0, 0));
        ReceiveFile_Button.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        ReceiveFile_Button.setForeground(new java.awt.Color(0, 255, 204));
        ReceiveFile_Button.setText("Receive File");
        ReceiveFile_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        ReceiveFile_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReceiveFile_ButtonActionPerformed(evt);
            }
        });

        RejectFile_Button.setBackground(new java.awt.Color(0, 0, 0));
        RejectFile_Button.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        RejectFile_Button.setForeground(new java.awt.Color(0, 255, 204));
        RejectFile_Button.setText("Reject File");
        RejectFile_Button.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 204, 204)));
        RejectFile_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RejectFile_ButtonActionPerformed(evt);
            }
        });

        ReceiveFile_TextArea.setEditable(false);
        ReceiveFile_TextArea.setColumns(20);
        ReceiveFile_TextArea.setRows(5);
        jScrollPane1.setViewportView(ReceiveFile_TextArea);

        javax.swing.GroupLayout Receiver_PanelLayout = new javax.swing.GroupLayout(Receiver_Panel);
        Receiver_Panel.setLayout(Receiver_PanelLayout);
        Receiver_PanelLayout.setHorizontalGroup(
            Receiver_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Receiver_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Receiver_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Receiver_Progress_Main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Receiver_PanelLayout.createSequentialGroup()
                        .addGroup(Receiver_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(Receiver_PanelLayout.createSequentialGroup()
                                .addComponent(DestDir_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DestDir_TextBox))
                            .addGroup(Receiver_PanelLayout.createSequentialGroup()
                                .addComponent(DestFilename_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DestFilename_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addComponent(RejectFile_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ReceiveFile_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        Receiver_PanelLayout.setVerticalGroup(
            Receiver_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Receiver_PanelLayout.createSequentialGroup()
                .addGroup(Receiver_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Receiver_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(Receiver_PanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(Receiver_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(DestDir_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DestDir_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(Receiver_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(DestFilename_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DestFilename_TextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(ReceiveFile_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(RejectFile_Button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Receiver_Progress_Main, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout Background_PanelLayout = new javax.swing.GroupLayout(Background_Panel);
        Background_Panel.setLayout(Background_PanelLayout);
        Background_PanelLayout.setHorizontalGroup(
            Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Background_PanelLayout.createSequentialGroup()
                .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(Background_PanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Receiver_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Sender_Panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(Background_PanelLayout.createSequentialGroup()
                        .addGap(359, 359, 359)
                        .addComponent(Title_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BasicDetails_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        Background_PanelLayout.setVerticalGroup(
            Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Background_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Background_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Title_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BasicDetails_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(Sender_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Receiver_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Background_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Background_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

public class Client extends Thread
{ 
    int READ_BUFFER_SIZE = 1000;
    int DISPLAY_INTERVAL = 1000;
    
    // initialize socket and input output streams 
    private Socket socket            = null; 
    private DataOutputStream out     = null; 
    private DataInputStream in       = null;
    
    File file;
    String filename = "";
    String ext = "";
    long filesize = 0;
    
    long loaded_size = 0;
    
    public Exception errors = null;
  
    // constructor to put ip address and port 
    public Client(String address, int port)
    { 
        // establish a connection 
        try
        { 
            socket = new Socket(address, port); 
            System.out.println("Connected"); 

            // sends output to the socket 
            out    = new DataOutputStream(socket.getOutputStream()); 
            in     = new DataInputStream(socket.getInputStream());
        } 
        catch(UnknownHostException u) 
        { 
            System.out.println("Unknown Host Error"); 
            System.out.println(u); 
            errors = u;
        } 
        catch(IOException i) 
        { 
            System.out.println("IO Error in client creation");
            System.out.println(i); 
            errors = i;
        } 
    } 
    
    void CloseConnection()
    {
        // close the connection 
        try
        { 
            in.close();
            out.close(); 
            socket.close(); 
        } 
        catch(IOException i) 
        { 
            System.out.println("IO Error in closing client");
            System.out.println(i); 
            errors = i;
        } 
    }
    
    void SendFile() throws IOException
    {
        filename = Filename_TextBox.getText().substring(0, Filename_TextBox.getText().lastIndexOf('.'));
        ext = Filename_TextBox.getText().substring(Filename_TextBox.getText().lastIndexOf('.') + 1);
        
        file = new File(Directory_TextBox.getText());
        file = new File(file, filename + "." + ext);
        if(!file.exists())
        {
            SendFile_TextArea.setText(Directory_TextBox.getText() + "\\" + filename + "." + ext + ": File Does not Exist.\n");
            System.out.println(Directory_TextBox.getText() + "\\" + filename + "." + ext + ": File Does not Exist.\n");
            return;
        }
        System.out.println(Directory_TextBox.getText() + "\\" + filename + "." + ext + ": File Does Exist.\n");
        filesize = file.length();
        
        SendFile_TextArea.setText("Sending " + filename + "." + ext + " of size " + filesize + "...\n");

        // Read filename and ext and filesize
        out.writeUTF(filename);
        out.writeUTF(ext);
        out.writeUTF(filesize + "");
        
        // Start sending within thread
        Thread t = this;
        t.start();
    }
    

    public void run()
    {
        try
        {
            //System.out.println("DEBUG: SENDER HI: " + client_index + " -- " + socket.getInetAddress()+ ", " + socket.getPort());
            
//            ServerSocket ackserver = new ServerSocket(9008);
//            Socket acksocket = ackserver.accept();
//            System.out.println("ACK CONNECTED");
//            String ack = new DataInputStream(acksocket.getInputStream()).readUTF();
            String ack = client.in.readUTF();
//            String ack = server.in[client_index].readUTF();
            
            // Disable Buttons
//            RejectFile_Button.setEnabled(false);
//            ReceiveFile_Button.setEnabled(false);
            
            //System.out.println("DEBUG: SENDER ACK: " + ack);

            if(ack.equals("Accepted"))
            {
                SendFile_TextArea.append("Sending " + filename + "." + ext + " of size " + filesize + " ACCEPTED.\n");
                System.out.println("Sending " + filename + "." + ext + " of size " + filesize + " ACCEPTED.\n");

                try ( 
                        FileInputStream fin = new FileInputStream(file)
                    ) 
                {
                    //FileInputStream fin = new FileInputStream(file);
                    
                    System.out.println("Started Sending");
                    
                    loaded_size = 0;
                    Sender_Progress_Main.setValue(0);
                    Sender_Progress_Main.setMaximum((int)filesize);

                    int display_counter = 1;
                    byte[] b = new byte[READ_BUFFER_SIZE];
                    while(loaded_size < filesize)         //Read byte by byte or by buffer
                    {
//                        c = (byte) fin.read();
//                        loaded_size = loaded_size + 1;
//                        out.write(c);
                        
                        if(loaded_size + READ_BUFFER_SIZE > filesize) b = new byte[(int)(filesize - loaded_size)];
                        fin.read(b);
                        loaded_size = loaded_size + b.length;
                        out.write(b);

                        // DISPLAY // 
                        //System.out.println("Client: " + loaded_size + " - " + c); 
                        // DISPLAY // 
                        
                        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        if(loaded_size / display_counter > DISPLAY_INTERVAL)
                        {
                            display_counter = display_counter + 1;
                            // Display Thread
//                            Thread displayThread = new DisplayProgressThread("Sender", filename, filesize, loaded_size);
//                            if(displayThread.isAlive()) displayThread.interrupt();
//                            displayThread.start();

                            //if(loaded_size > filesize) loaded_size = filesize;
                            
                            SendFile_TextArea.append(filename + ": " + loaded_size + "/" + filesize + ".\n");
                            System.out.println(filename + ": " + loaded_size + "/" + filesize + ".\n");
                            Sender_Progress_Main.setValue((int) loaded_size);
                        }
                    }
                    System.out.println("Client Over!");
                    fin.close();
                }
                SendFile_TextArea.append(filename + "." + ext + " of size " + filesize + " sent successfully.\n");
                System.out.println(filename + "." + ext + " of size " + filesize + " sent successfully.\n");
            }
            else 
            {
                SendFile_TextArea.append("Sending " + filename + "." + ext + " of size " + filesize + " REJECTED.\n");
                System.out.println("Sending " + filename + "." + ext + " of size " + filesize + " REJECTED.\n");
            }
        }
        catch(IOException i) 
        { 
            System.out.println("IO Error in Sending file from Sender");
            System.out.println(i); 
            errors = i;
        } 
    }
}

public class Server
{ 
    //initialize socket and input stream 
    private Socket[]          socket   = new Socket[10]; 
    private ServerSocket      serversoc   = null; 
    private DataInputStream[] in       = new DataInputStream[10];
    private DataOutputStream[] out     = new DataOutputStream[10];
    
    int no_of_clients = 0;
    boolean[] client_availablity = new boolean[10]; 
    
    String[] filename = new String[10];
    String[] ext = new String[10];
    long[] filesize = new long[10];
    
    boolean[] accept_file = new boolean[10];
    long[] loaded_size = new long[10];
    
    public Exception errors = null;
  
    // constructor with port 
    public Server(int port) 
    { 
        // starts server and waits for a connection 
        try
        { 
            serversoc = new ServerSocket(port); 
            System.out.println("Server started"); 
  
            System.out.println("Waiting for a client ..."); 
            
            for(int i=0;i<client_availablity.length;i++) client_availablity[i] = true;
        } 
        catch(IOException i) 
        { 
            System.out.println("IO Error in Creating server socket");
            System.out.println(i); 
            errors = i;
        } 
    } 
    
    int AcceptClient()
    {
        try
        {
            int index = -1;
            for(int i=0;i<client_availablity.length;i++)
            {
                if(client_availablity[i])
                {
                    index = i;
                    break;
                }
            }
            socket[index] = serversoc.accept(); 
            System.out.println("Client accepted"); 
            no_of_clients = no_of_clients + 1;
            client_availablity[index] = false;
            
            if(server_accepting_thread != null) server_accepting_thread.interrupt();

            server_accepting_thread = new ServerThreadClass();
            server_accepting_thread.start();
            
            return index;
        }
        catch(IOException i) 
        { 
            System.out.println("IO Error in Accepting client");
            System.out.println(i); 
            errors = i;
            
            return -1;
        } 
    }
    
    void CloseConnection(int client_index)
    {
        try
        {
            System.out.println("Closing connection"); 
            // close connection 
            socket[client_index].close(); 
            in[client_index].close();
            out[client_index].close();
            no_of_clients = no_of_clients - 1;
            client_availablity[client_index] = true;
        }
        catch(IOException i) 
        { 
            System.out.println("IO Error in closing socket connection");
            System.out.println(i); 
            errors = i;
        } 
    }
    
    void ReceiveFile_Init(int client_index)
    {
        try
        {
            // takes input from the client socket 
            in[client_index] = new DataInputStream(socket[client_index].getInputStream()); 
            
            out[client_index] = new DataOutputStream(socket[client_index].getOutputStream()); 

            // Read filename and ext and filesize
            filename[client_index] = in[client_index].readUTF(); 
            ext[client_index] = in[client_index].readUTF(); 
            filesize[client_index] = Integer.parseInt(in[client_index].readUTF()); 

            ReceiveFile_TextArea.setText(socket[client_index].getInetAddress() + " wants to send " + filename[client_index] + "." + ext[client_index] + " of size " + filesize[client_index] + "...\n");
            System.out.println(socket[client_index].getInetAddress() + " wants to send " + filename[client_index] + "." + ext[client_index] + " of size " + filesize[client_index] + "...");
        }
        catch(IOException i) 
        { 
            System.out.println("IO Error in receiving file in Receiver Init");
            System.out.println(i); 
            errors = i;
        } 
    }
    
    void ReceiveFile(int client_index)
    {
        Thread receivefile_thread = new ReceiveFileThread(client_index);
        receivefile_thread.start();
    }
    
}

public class ReceiveFileThread extends Thread
{
    int client_index;
    
    public ReceiveFileThread(int cindex)
    {
        client_index = cindex;
    }
    

    public void run()
    {
        try
        {
            //System.out.println("DEBUG: RECEIVER HI: " + client_index + " -- " + server.socket[client_index].getInetAddress()+ ", " + server.socket[client_index].getPort());
            
//            Socket acksocket = new Socket("192.168.56.1", 9008);
            
            if(!server.accept_file[client_index])
            {
//                new DataOutputStream(acksocket.getOutputStream()).writeUTF("Rejected");
                server.out[client_index].writeUTF("Rejected");
//                client.out.writeUTF("Rejected");
                
                ReceiveFile_TextArea.append(server.socket[client_index].getInetAddress()+ " attempt to send " + server.filename[client_index] + "." + server.ext[client_index] + " of size " + server.filesize[client_index] + " REJECTED.\n");
                System.out.println(server.socket[client_index].getInetAddress() + " attempt to send " + server.filename[client_index] + "." + server.ext[client_index] + " of size " + server.filesize[client_index] + " REJECTED.\n");
                return;
            }

//            new DataOutputStream(acksocket.getOutputStream()).writeUTF("Accepted");
            server.out[client_index].writeUTF("Accepted");
//            client.out.writeUTF("Accepted");

            ReceiveFile_TextArea.append(server.socket[client_index].getInetAddress() + " attempt to send " + server.filename[client_index] + "." + server.ext[client_index] + " of size " + server.filesize[client_index] + " ACCEPTED.\n");
            System.out.println(server.socket[client_index].getInetAddress() + " attempt to send " + server.filename[client_index] + "." + server.ext[client_index] + " of size " + server.filesize[client_index] + " ACCEPTED.\n");

            File file = new File(DestDir_TextBox.getText());
            file = new File(file, DestFilename_TextBox.getText() + "." + server.ext[client_index]);
            file.createNewFile();
            
            try(
                    FileOutputStream fout = new FileOutputStream(file);
            )
            {
                server.loaded_size[client_index] = 0;
                Receiver_Progress_Main.setValue(0);
                Receiver_Progress_Main.setMaximum((int)server.filesize[client_index]);

                int display_counter = 1;
                byte[] b = new byte[client.READ_BUFFER_SIZE];
                while (((server.loaded_size[client_index] < server.filesize[client_index]) && true))
                { 

                    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                    c = server.in[client_index].read();
//                    server.loaded_size[client_index] = server.loaded_size[client_index] + 1;
//                    fout.write((byte) c);
                    
                    if(server.loaded_size[client_index] + client.READ_BUFFER_SIZE > server.filesize[client_index]) b = new byte[(int)(server.filesize[client_index] - server.loaded_size[client_index])];
                    
                    server.in[client_index].read(b);
                    server.loaded_size[client_index] = server.loaded_size[client_index] + b.length;
                    fout.write(b);

                    // DISPLAY  
                    //System.out.println("\t\t\t\t\t\tServer: " + server.loaded_size[client_index] + " - " + c); 
                    // DISPLAY // 

                    if(server.loaded_size[client_index] / display_counter > client.DISPLAY_INTERVAL)
                    {
                        display_counter = display_counter + 1;
                        // Display Thread Init
//                        Thread displayThread = new DisplayProgressThread("Receiver", server.filename[client_index], server.filesize[client_index], server.loaded_size[client_index]);
//                        if(displayThread.isAlive()) displayThread.interrupt();
//                        displayThread.start();

                        ReceiveFile_TextArea.append(server.filename[client_index] + ": " + server.loaded_size[client_index] + "/" + server.filesize[client_index] + ".\n");
                        //System.out.println(server.filename[client_index] + ": " + server.loaded_size[client_index] + "/" + server.filesize[client_index] + ".\n");
                        Receiver_Progress_Main.setValue((int) server.loaded_size[client_index]);
                    }
                } 
                System.out.println("Server Over!");
                fout.close();
            }

            ReceiveFile_TextArea.append(server.filename[client_index] + "." + server.ext[client_index] + " of size " + server.filesize[client_index] + " received successfully.\n");
            System.out.println(server.filename[client_index] + "." + server.ext[client_index] + " of size " + server.filesize[client_index] + " received successfully.\n");

            client.CloseConnection();
            server.CloseConnection(client_index);
        }
        catch(IOException i) 
        { 
            System.out.println("IO Error");
            System.out.println(i); 
            server.errors = i;
        } 
    }
}

public class ServerThreadClass extends Thread
{
    public ServerThreadClass()
    {
        
    }

    public void run()
    {
        Receiver_Progress_Main.setValue(0);
        client_index = server.AcceptClient();
        server.ReceiveFile_Init(client_index);
        RejectFile_Button.setEnabled(true);
        ReceiveFile_Button.setEnabled(true);
    } 
}

public class DisplayProgressThread extends Thread
{
    String mode;
    String filename;
    long filesize;
    long loaded_size;
    
    public DisplayProgressThread(String mode_param, String filename_param, long filesize_param, long loaded_size_param)
    {
        mode = mode_param;
        filename = filename_param;
        filesize = filesize_param;
        loaded_size = loaded_size_param;
    }

    public void run()
    {
        if(mode.equals("Receiver"))
        {
            ReceiveFile_TextArea.append(filename + ": " + loaded_size + "/" + filesize + ".\n");
            //System.out.println(filename + ": " + loaded_size + "/" + filesize + ".\n");
            Receiver_Progress_Main.setValue((int) loaded_size);
        }
        else if(mode.equals("Sender"))
        {
            SendFile_TextArea.append(filename + ": " + loaded_size + "/" + filesize + ".\n");
            System.out.println(filename + ": " + loaded_size + "/" + filesize + ".\n");
            Sender_Progress_Main.setValue((int) loaded_size);
        }
    } 
}
    
    int sender_port = 9009;
    int receiver_port = 9009;
    String IPAddress = null;
    
    Client client = null;
    Server server = null;
    int client_index;
    
    Thread server_accepting_thread = null;
    
    Thread receivefile_thread = null;

    private void ReceiveFile_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReceiveFile_ButtonActionPerformed
    server.accept_file[client_index] = true;
    server.ReceiveFile(client_index);
    }//GEN-LAST:event_ReceiveFile_ButtonActionPerformed

    private void SendFile_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendFile_ButtonActionPerformed
    sender_port = Integer.parseInt(Sender_Port_TextBox.getText());
    
    int ipaddr_1 = Integer.parseInt(IPAddr_1_TextBox.getText());
    int ipaddr_2 = Integer.parseInt(IPAddr_2_TextBox.getText());
    int ipaddr_3 = Integer.parseInt(IPAddr_3_TextBox.getText());
    int ipaddr_4 = Integer.parseInt(IPAddr_4_TextBox.getText());
    
    IPAddress = ipaddr_1 + "." + ipaddr_2 + "." + ipaddr_3 + "." + ipaddr_4;
    
    try
    {
        Sender_Progress_Main.setValue(0);
        client = new Client(IPAddress, sender_port);
        client.SendFile();
        //client.CloseConnection();
    }
    catch(IOException i) 
    { 
        System.out.println(i); 
    } 
    }//GEN-LAST:event_SendFile_ButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    RejectFile_Button.setEnabled(false);
    ReceiveFile_Button.setEnabled(false);
    SendFile_Button.setEnabled(false);
    
    Sender_Progress_Main.setMinimum(0);
    Receiver_Progress_Main.setMinimum(0);
    }//GEN-LAST:event_formWindowOpened

    private void RejectFile_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RejectFile_ButtonActionPerformed
    server.accept_file[client_index] = false;
    server.ReceiveFile(client_index);
    }//GEN-LAST:event_RejectFile_ButtonActionPerformed

    private void UpdatePortIP_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePortIP_ButtonActionPerformed
    boolean changed_server = false;

    int ipaddr_1 = Integer.parseInt(IPAddr_1_TextBox.getText());
    int ipaddr_2 = Integer.parseInt(IPAddr_2_TextBox.getText());
    int ipaddr_3 = Integer.parseInt(IPAddr_3_TextBox.getText());
    int ipaddr_4 = Integer.parseInt(IPAddr_4_TextBox.getText());
    
    System.out.println("Sender Port: " + sender_port + " -> " + Integer.parseInt(Sender_Port_TextBox.getText()));
    System.out.println("Receiver Port: " + receiver_port + " -> " + Integer.parseInt(Receiver_Port_TextBox.getText()));
    System.out.println("IP: " + IPAddress + " -> " + ipaddr_1 + "." + ipaddr_2 + "." + ipaddr_3 + "." + ipaddr_4);
    
    if(sender_port != Integer.parseInt(Sender_Port_TextBox.getText()))
    {
        sender_port = Integer.parseInt(Sender_Port_TextBox.getText());
        changed_server = true;
    }
    
    if(receiver_port != Integer.parseInt(Receiver_Port_TextBox.getText()))
    {
        receiver_port = Integer.parseInt(Receiver_Port_TextBox.getText());
        changed_server = true;
    }
    
    if(IPAddress == null || !IPAddress.equals(ipaddr_1 + "." + ipaddr_2 + "." + ipaddr_3 + "." + ipaddr_4))
    {
        IPAddress = ipaddr_1 + "." + ipaddr_2 + "." + ipaddr_3 + "." + ipaddr_4;
        changed_server = true;
    }
    
    if(changed_server)
    {
        if(server_accepting_thread != null) server_accepting_thread.interrupt();
        if(server != null) server.CloseConnection(client_index);
        server = new Server(receiver_port);
        server_accepting_thread = new ServerThreadClass();
        server_accepting_thread.start();
    }

    SendFile_Button.setEnabled(true);
    }//GEN-LAST:event_UpdatePortIP_ButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FileTransfer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background_Panel;
    private javax.swing.JPanel BasicDetails_Panel;
    private javax.swing.JLabel DestDir_Label;
    private javax.swing.JTextField DestDir_TextBox;
    private javax.swing.JLabel DestFilename_Label;
    private javax.swing.JTextField DestFilename_TextBox;
    private javax.swing.JLabel Directory_Label;
    private javax.swing.JTextField Directory_TextBox;
    private javax.swing.JLabel Filename_Label;
    private javax.swing.JTextField Filename_TextBox;
    private javax.swing.JTextField IPAddr_1_TextBox;
    private javax.swing.JTextField IPAddr_2_TextBox;
    private javax.swing.JTextField IPAddr_3_TextBox;
    private javax.swing.JTextField IPAddr_4_TextBox;
    private javax.swing.JLabel IPAddr_Label;
    private javax.swing.JButton ReceiveFile_Button;
    private javax.swing.JTextArea ReceiveFile_TextArea;
    private javax.swing.JPanel Receiver_Panel;
    private javax.swing.JLabel Receiver_Port_Label;
    private javax.swing.JTextField Receiver_Port_TextBox;
    private javax.swing.JProgressBar Receiver_Progress_Main;
    private javax.swing.JButton RejectFile_Button;
    private javax.swing.JButton SendFile_Button;
    private javax.swing.JTextArea SendFile_TextArea;
    private javax.swing.JPanel Sender_Panel;
    private javax.swing.JLabel Sender_Port_Label;
    private javax.swing.JTextField Sender_Port_TextBox;
    private javax.swing.JProgressBar Sender_Progress_Main;
    private javax.swing.JLabel Title_Label;
    private javax.swing.JButton UpdatePortIP_Button;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
